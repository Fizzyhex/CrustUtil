"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[461],{26340:function(t){t.exports=JSON.parse('{"functions":[{"name":"LoadComponents","desc":"Requires all children of the provided Instance.\\n\\n\\n```lua\\n\\t-- Require the module\\n\\tlocal KnitUtil = require(somewhere.KnitUtil)\\n\\n\\t-- Locate components folder\\n\\tlocal componentsFolder = ReplicatedStorage.Client.Components\\n\\n\\t-- Load all of the components\\n\\tlocal components = KnitUtil.LoadComponents(componentsFolder)\\n```","params":[{"name":"container","desc":"The folder containing the Components","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"table {Component}"}],"function_type":"static","source":{"line":40,"path":"lib/KnitUtil/init.lua"}},{"name":"MethodFromInstance","desc":"Searches all the Instance\'s components for a specific method.\\n\\n\\n## Writing cleaner code with MethodFromInstance\\n\\nLet\'s say we have two components: a door and a light switch. We want to write a script to interact with these objects and any new ones we may come up with in the future:\\n\\n### Door Component\\n```lua\\n\\tlocal Door = Component.new {\\n\\t\\tTag = \\"Door\\"\\n\\t}\\n\\n\\tfunction Door:_open()\\n\\t\\tprint(\\"Door open\\")\\n\\t\\tself.isOpen = true\\n\\tend\\n\\n\\tfunction Door:_close()\\n\\t\\tprint(\\"Door closed\\")\\n\\t\\tself.isOpen = false\\n\\tend\\n\\n\\tfunction Door:OnInteract(open: boolean)\\n\\t\\tif open then\\n\\t\\t\\tif self.isOpen then\\n\\t\\t\\t\\tself:_close()\\n\\t\\t\\telse\\n\\t\\t\\t\\tself:_open()\\n\\t\\t\\tend\\n\\t\\tend\\n\\tend\\n\\n\\tfunction Door:Construct()\\n\\t\\tself.isOpen = false\\n\\tend\\n```\\n\\n### Light Switch Component\\n```lua\\n\\tlocal LightSwitch = Component.new {\\n\\t\\tTag = \\"LightSwitch\\"\\n\\t}\\n\\n\\tfunction LightSwitch:_turnOn()\\n\\t\\tprint(\\"Light on\\")\\n\\t\\tself.isOn = true\\n\\tend\\n\\n\\tfunction LightSwitch:_turnOff()\\n\\t\\tprint(\\"Light off\\")\\n\\t\\tself.isOn = false\\n\\tend\\n\\n\\tfunction LightSwitch:OnInteract(on: boolean)\\n\\t\\tif on then\\n\\t\\t\\tif self.isOn then\\n\\t\\t\\t\\tself:_turnOff()\\n\\t\\t\\telse\\n\\t\\t\\t\\tself:_turnOn()\\n\\t\\t\\tend\\n\\t\\tend\\n\\tend\\n\\n\\tfunction LightSwitch:Construct()\\n\\t\\tself.isOn = false\\n\\tend\\n```\\n\\n### Interaction Script (without MethodFromInstance)\\n\\nWithout `MethodFromInstance`, we might write some interaction code like this:\\n```lua\\n\\t-- Require components we can interact with\\n\\tlocal DoorComponent = require(somewhere.Components.DoorComponent)\\n\\tlocal LightSwitchComponent = require(somewhere.Components.LightSwitch)\\n\\n\\tlocal function InteractWith(instance: Instance)\\n\\t\\t-- Scan through the Instance\'s components for an \'OnInteract\' method\\n\\t\\tif CollectionService:HasTag(instance, \\"Door\\") then\\n\\t\\t\\tDoorComponent:FromInstance(instance):OnInteract(true)\\n\\t\\telseif CollectionService:HasTag(instance, \\"LightSwitch\\") then\\n\\t\\t\\tLightSwitchComponent:FromInstance(instance):OnInteract(true)\\n\\t\\telse if ....... then\\n\\t\\t\\t-- etc etc etc\\n\\t\\t\\t.....\\n\\t\\tend\\n\\tend\\n\\n\\t-- Open the door\\n\\tInteractWith(workspace.Door)\\n\\t-- Flick the light switch to on\\n\\tInteractWith(workspace.LightSwitch)\\n```\\n\\n### Interaction Script (using MethodFromInstance)\\n\\nThis code is bad because it will get messy as we add more types of Components to our game.\\n\\nHowever, if we instead use `MethodFromInstance` we don\'t need to modify the code every time we create a new component.\\n\\nBelow is an example that implements `MethodFromInstance`:\\n```lua\\n\\tlocal function InteractWith(instance: Instance)\\n\\t\\t-- Scan through the Instance\'s components for an \'OnInteract\' method\\n\\t\\tlocal onInteract = KnitUtil.MethodFromInstance(instance, \\"OnInteract\\")\\n\\n\\t\\tif onInteract then\\n\\t\\t\\t-- Call the method\\n\\t\\t\\tonInteract(true)\\n\\t\\tend\\n\\tend\\n\\n\\t-- Open the door\\n\\tInteractWith(workspace.Door)\\n\\t-- Flick the light switch to on\\n\\tInteractWith(workspace.LightSwitch)\\n```","params":[{"name":"instance","desc":"The Instance to search","lua_type":"Instance"},{"name":"methodName","desc":"The name of the method to look for","lua_type":"string"}],"returns":[{"desc":"The method that was found","lua_type":"method function?"},{"desc":"The component instance the method belongs to","lua_type":"component Component?"}],"function_type":"static","source":{"line":185,"path":"lib/KnitUtil/init.lua"}},{"name":"VariableFromInstance","desc":"Similar to `MethodFromInstance`, but for non-methods.\\n\\n\\n```lua\\n\\tlocal function GetHealth(enemy: Instance)\\n\\t\\tlocal health: number? = KnitUtil.VariableFromInstance(enemy, \\"MyHealth\\")\\n\\t\\treturn health\\n\\tend\\n\\n\\tprint(GetHealth(workspace.Zombie))\\n\\tprint(GetHealth(workspace.Player))\\n\\tprint(GetHealth(workspace.DestructableBox))\\n```","params":[{"name":"instance","desc":"The Instance to search","lua_type":"Instance"},{"name":"variableName","desc":"The variable to look for","lua_type":"string"}],"returns":[{"desc":"The variable that was found","lua_type":"variable any"},{"desc":"The component instance the method belongs to","lua_type":"component Component?"}],"function_type":"static","source":{"line":227,"path":"lib/KnitUtil/init.lua"}}],"properties":[],"types":[],"name":"KnitUtil","desc":"A module that contains useful functions for projects that use [Knit](https://sleitnick.github.io/Knit/).","source":{"line":12,"path":"lib/KnitUtil/init.lua"}}')}}]);