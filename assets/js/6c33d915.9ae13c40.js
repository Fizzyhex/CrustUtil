"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[96],{62395:e=>{e.exports=JSON.parse('{"functions":[{"name":"Require","desc":"Requires the [ModuleScript] under a new Actor. If a table of modules is passed, they will all be placed under the same Actor.","params":[{"name":"modules","desc":"ModuleScript(s) to require","lua_type":"ModuleScript | {ModuleScript}"},{"name":"executor","desc":"The Executor that will be used to require the module","lua_type":"Executor"}],"returns":[{"desc":"","lua_type":"Actor\\r\\n"}],"function_type":"method","source":{"line":93,"path":"lib/ParallelRequire/init.lua"}},{"name":"new","desc":"An optional constructor that creates a new ParallelRequire object.\\n\\n:::tip\\nYou don\'t need to use the constructor to use the module. Only use the constructor if you need to use the `ParallelRequireConfig` parameter!\\n:::","params":[{"name":"config","desc":"","lua_type":"ParallelRequireConfig"}],"returns":[],"function_type":"static","source":{"line":138,"path":"lib/ParallelRequire/init.lua"}}],"properties":[],"types":[{"name":"Executor","desc":"An executor is a [ModuleScript] that is used to load ModuleScripts that are required.\\n\\nAn instance of an executor is created per [ModuleScript] that is required.\\n\\n```lua\\n-- This is the default Executor ModuleScript.\\n-- When an executor is required, it will have an ObjectValue parented to it that points to the module that needs to be required.\\n\\nrequire(script.module.Value)\\nreturn nil\\n```\\n\\n```lua\\n-- Example Executor that requires the module and then calls its \'OnStart\' method too.\\n\\nlocal module = require(script.module.Value)\\n\\nif module.OnStart then\\n\\tmodule:OnStart()\\nend\\n\\nreturn nil\\n```\\n\\n:::caution\\n\\nExecutors must return something, as they are ModuleScripts! Because the returned value won\'t be used, you should just return `nil`.\\n\\n:::\\n\\n:::note\\n\\nExecutors are created per `ModuleScript`, so it\'s safe to yield incide of them.\\n\\n:::","lua_type":"ModuleScript","source":{"line":79,"path":"lib/ParallelRequire/init.lua"}},{"name":"ParallelRequireConfig","desc":"The configuration used when instantiating a new `ParallelRequire` object.","lua_type":"{executor: Executor, container: Instance?}","source":{"line":86,"path":"lib/ParallelRequire/init.lua"}}],"name":"ParallelRequire","desc":"A module that assists with requiring modules into [Actor] instances.\\n\\n```lua\\nlocal ParallelRequire = require(Somewhere.ParallelRequire)\\nlocal SingletonExecutor = Somewhere.ParallelExecutors.Singleton\\n\\n-- This will require \'SomeModule\' inside of an Actor\\nParallelRequire(Somewhere.SomeModule)\\n\\n-- This will require \'SomeModule\' and \'SomeOtherSingleton\' inside of the same actor, using the custom \'SingletonExecutor\' Executor.\\nParallelRequire(Somewhere.Singletons:GetChildren(), SingletonExecutor)\\n```","source":{"line":31,"path":"lib/ParallelRequire/init.lua"}}')}}]);