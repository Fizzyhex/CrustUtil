"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[734],{16884:t=>{t.exports=JSON.parse('{"functions":[{"name":"allAttributes","desc":"Returns a dictionary containing all of the attributes present on an Instance.","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"excludePrefab","desc":"","lua_type":"boolean"}],"returns":[],"function_type":"static","source":{"line":7,"path":"src/Attributes/allAttributes.lua"}},{"name":"getAttribute","desc":"Gets an instance\'s attributes, falling back on the prefab if it exists.\\n\\n```lua\\n-- For this example, we\'ll use our local player\\nlocal localPlayer = game:GetService(\\"Players\\").LocalPlayer\\n\\n-- Set the \'Level\' attribute to 7\\nAttributes.setAttribute(localPlayer, \\"Level\\", 7)\\n-- Get the \'Level\' attribute\\nlocal level = Attributes.getAttribute(localPlayer, \\"Level\\")\\n\\n-- Print to test if it worked!\\nprint(level)\\n\\nOutput: 7\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attribute","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","source":{"line":24,"path":"src/Attributes/getAttribute.lua"}},{"name":"patchAttributes","desc":"Patches the targetted instance\'s attributes.\\n\\n```lua\\nlocal baseplate: BasePart = workspace.Baseplate\\n\\npatchAttributes(baseplate) {\\n\\tLastModified = tick(),\\n\\t-- \u26a0 You need to use Attributes.NIL to set a value to nil, as lua tables\\n\\t-- cannot contain nil values!\\n\\tOwner = Attributes.NIL\\n}\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"(attributes: {[string]: any}) -> ()\\r\\n"}],"function_type":"static","source":{"line":18,"path":"src/Attributes/patchAttributes.lua"}},{"name":"setAttribute","desc":"Sets an instance\'s attribute to the specified value.\\n\\n```lua\\n-- For this example, we\'ll use our local player\\nlocal localPlayer = game:GetService(\\"Players\\").LocalPlayer\\n\\n-- Set the \'Level\' attribute to 7\\nAttributes.setAttribute(localPlayer, \\"Level\\", 7)\\n-- Get the \'Level\' attribute\\nlocal level = Attributes.getAttribute(localPlayer, \\"Level\\")\\n\\n-- Print to test if it worked!\\nprint(level)\\n\\nOutput: 7\\n```","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"attribute","desc":"","lua_type":"string"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":20,"path":"src/Attributes/setAttribute.lua"}}],"properties":[{"name":"attributes","desc":"A decorator used to patch an instance with the provided attributes.\\n\\n```lua\\nlocal baseplate: BasePart = workspace.Baseplate\\n\\npatchAttributes(baseplate) {\\n\\tLastModified = tick(),\\n\\t-- \u26a0 You need to use Attributes.NIL to set a value to nil, as lua tables\\n\\t-- cannot contain nil values!\\n\\tOwner = Attributes.NIL\\n}\\n```\\n\\t","lua_type":"table","source":{"line":35,"path":"src/Attributes/patchAttributes.lua"}}],"types":[],"name":"Attributes","desc":"A wrapper for Roblox attributes that allows you to create Prefabs.","source":{"line":3,"path":"src/Attributes/init.lua"}}')}}]);