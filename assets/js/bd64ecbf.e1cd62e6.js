"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[440],{97372:function(t){t.exports=JSON.parse('{"functions":[{"name":"CreateInstance","desc":"A utility for creating Instances. \\n\\n\\n```lua\\n\\tlocal smokeyCube = CreateInstance(\\"BasePart\\", {\\n\\t\\tName = \\"SmokeyCube\\",\\n\\t\\tAnchored = true,\\n\\t\\tSize = Vector3.new(4, 4, 4)\\n\\t\\tParent = workspace\\n\\t\\t[UIComponent.Children] = CreateInstance(\\"Smoke\\", {\\n\\t\\t\\tSize = 4\\n\\t\\t})\\n\\t})\\n\\t\\n\\t-- ...which is equivalent to:\\n\\tlocal smokeyCube = Instance.new(\\"BasePart\\")\\n\\tsmokeyCube.Name = \\"SmokeyCube\\"\\n\\tsmokeyCube.Anchored = true\\n\\tsmokeyCube.Size = Vector3.new(4, 4, 4)\\n\\tsmokeyCube.Parent = workspace\\n\\n\\tlocal smoke = Instance.new(\\"Smoke\\")\\n\\tsmoke.Size = 4\\n\\tsmoke.Parent = smokeyCube\\n```\\n\\n### Assigning children\\n\\nAssigning children can be done within the CreateInstance function. The simplist way to do this is to simply pass a child:\\n\\n```lua\\n\\tlocal gui = CreateInstance(\\"ScreenGui\\", {\\n\\t\\tParent = PlayerGui,\\n\\n\\t\\tChildren = CreateInstance(\\"Frame\\", {\\n\\t\\t\\tSize = UDim2.new(0, 50, 0, 50),\\n\\t\\t}),\\n\\t})\\n```\\n\\nOr a table for multiple children:\\n```lua\\n\\tlocal gui = CreateInstance(\\"ScreenGui\\", {\\n\\t\\tParent = PlayerGui,\\n\\n\\t\\tChildren = {\\n\\t\\t\\tCreateInstance(\\"Frame\\", {\\n\\t\\t\\t\\tSize = UDim2.new(0, 50, 0, 50),\\n\\t\\t\\t}),\\n\\n\\t\\t\\tCreateInstance(\\"TextButton\\", {\\n\\t\\t\\t\\tSize = UDim2.new(0, 50, 0, 50),\\n\\t\\t\\t}),\\n\\t\\t}\\n\\t})\\n```\\n\\nIf you ever need to, you can also specify multiple children under different keys using the `UIComponent.Children` Enum:\\n```lua\\n\\tlocal gui = CreateInstance(\\"ScreenGui\\", {\\n\\t\\tParent = PlayerGui,\\n\\n\\t\\t[UIComponent.Children] = {\\n\\t\\t\\tCreateInstance(\\"Frame\\", {\\n\\t\\t\\t\\tSize = UDim2.new(0, 50, 0, 50),\\n\\t\\t\\t}),\\n\\t\\t}\\n\\n\\t\\t[UIComponent.Children] = {\\n\\t\\t\\tCreateInstance(\\"TextButton\\", {\\n\\t\\t\\t\\tSize = UDim2.new(0, 50, 0, 50),\\n\\t\\t\\t}),\\n\\t\\t}\\n\\t})\\n```","params":[{"name":"className","desc":"The class name of the Instance you want to create","lua_type":"string"},{"name":"props","desc":"The properties of the instance you want to create","lua_type":"table"}],"returns":[{"desc":"Returns a new Instance","lua_type":"Instance"}],"function_type":"static","source":{"line":153,"path":"lib/UIComponent/init.lua"}},{"name":"Build","desc":"`Build` is called during the UIComponent\'s creation.\\n\\nBuild should **not** be called to create a new Instance of a UIComponent. Instead, call it like a function.\\n\\n\\n```lua\\n\\tlocal UIComponent = require(somewhere.UIComponent)\\n\\n\\tlocal PersistentGui = UIComponent.new()\\n\\n\\tfunction PersistentGui:Build()\\n\\t\\tself.gui = CreateInstance(\\"ScreenGui\\", {\\n\\t\\t\\tName = \\"PersistentGui\\",\\n\\t\\t\\tResetOnSpawn = false,\\n\\t\\t\\tZIndex = self.props.ZIndex,\\n\\t\\t\\tParent = LOCAL_PLAYER.PlayerGui\\n\\t\\t})\\n\\n\\t\\treturn self.gui, tick()\\n\\tend\\n\\n\\tlocal persistentGui, _, creationTime = MainGui.new{\\n\\t\\tZIndex = 3\\n\\t}\\n\\n\\tprint(\\"Created GUI at\\", creationTime)\\n```","params":[],"returns":[{"desc":"Returns the object and any provided arguments","lua_type":"self, ..."}],"function_type":"method","source":{"line":224,"path":"lib/UIComponent/init.lua"}},{"name":"Defer","desc":"`Defer` is called after `Build` and will not yield the thread.","params":[],"returns":[],"function_type":"method","source":{"line":230,"path":"lib/UIComponent/init.lua"}},{"name":"Is","desc":"Checks if the given object is a UIComponent object.","params":[{"name":"thing","desc":"Object to check","lua_type":"any"}],"returns":[{"desc":"`true` if object is a UIComponent.","lua_type":"boolean"}],"function_type":"static","source":{"line":240,"path":"lib/UIComponent/init.lua"}},{"name":"new","desc":"Creates a new UIComponent class.\\n\\n```lua\\n\\tlocal newComponent = UIComponent.new()\\n```","params":[],"returns":[{"desc":"","lua_type":"UIComponent"}],"function_type":"static","source":{"line":253,"path":"lib/UIComponent/init.lua"}}],"properties":[],"types":[],"name":"UIComponent","desc":"A UIComponent is a class for managing components of user interfaces.\\n\\n## Example\\n\\n```lua\\n\\tlocal UIComponent = require(somewhere.UIComponent)\\n\\tlocal CreateInstance = UIComponent.CreateInstance\\n\\t\\n\\tlocal LoudButton = UIComponent.new()\\n\\t\\n\\tfunction LoudButton:SetText(text)\\n\\t\\tself.button.Text = text:upper()\\n\\tend\\n\\t\\n\\tfunction LoudButton:Build()\\n\\t\\tself.button = CreateInstance(\\"TextButton\\", {\\n\\t\\t\\tSize = UDim2.new(0, 80, 0, 30),\\n\\t\\t\\tText = self.props.text\\n\\t\\t\\tParent = self.props.parent\\n\\t\\t})\\n\\t\\t\\n\\t\\treturn self.button, self.SetText\\n\\tend\\n\\t\\n\\tlocal screenGui = CreateInstance(\\"ScreenGui\\", {\\n\\t\\tResetOnSpawn = false, \\n\\t\\tParent = LOCAL_PLAYER.PlayerGui\\n\\t})\\n\\t\\n\\tlocal button, _, UpdateText = LoudButton {text = \\"click me 10 times!\\", parent = screenGui}\\n\\tlocal clicks = 0\\n\\t\\n\\tbutton.button.MouseButton1Click:Connect(function(clickCounter)\\n\\t\\tclicks += 1\\n\\t\\tUpdateText(button, button.props.text .. \\" \\" .. clicks)\\n\\tend)\\n```","source":{"line":46,"path":"lib/UIComponent/init.lua"}}')}}]);