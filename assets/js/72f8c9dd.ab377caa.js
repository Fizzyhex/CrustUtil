"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[709],{90170:e=>{e.exports=JSON.parse('{"functions":[{"name":"LoadModules","desc":"Mass requires the modules in a table. Any table items that aren\'t `ModuleScripts` will be skipped.\\n\\n\\n```lua\\n-- Get the Strapper module\\nlocal Strapper = require(Somewhere.Strapper)\\n\\n-- Construct a new strapper\\nlocal strapper = Strapper.new()\\n\\n-- Require all ModuleScripts that are children of the \'Modules\' folder\\nlocal modules = strapper:LoadModules(ReplicatedStorage.Modules:GetChildren(), {\\n    require = Strapper.requireMethods.quietSuccess -- This will only print to the output that the module is being required\\n})\\n\\n-- Print the dictionary of required modules\\nprint(modules)\\n```","params":[{"name":"modules","desc":"A table of modules","lua_type":"{Instance}"},{"name":"params","desc":"Optional LoadParams","lua_type":"LoadParams?"}],"returns":[{"desc":"","lua_type":"{[ModuleScript]: any} | {ModuleScript}\\r\\n"}],"function_type":"method","source":{"line":172,"path":"lib/Strapper/init.lua"}},{"name":"new","desc":"Constructs a new Strapper object, with the optional `config` arugment.","params":[{"name":"config","desc":"","lua_type":"StrapperConfig?"}],"returns":[],"function_type":"static","source":{"line":217,"path":"lib/Strapper/init.lua"}}],"properties":[{"name":"requireMethods","desc":"A table of basic require functions. If you don\'t need to write your own, you can use these:\\n\\n`quietSuccess` - Only prints that the module was required.\\n\\n`loud` - Prints that the module was required, then prints again when the require was successful.\\n\\n```lua\\nquietSuccess = function(module: ModuleScript)\\n    print(\\"Requiring\\", module, \\"at\\", module:GetFullName())\\n    return require(module)\\nend,\\n\\nloud = function(module: ModuleScript)\\n    print(\\"Requiring\\", module, \\"at\\", module:GetFullName(), \\"...\\")\\n    local result = require(module)\\n    print(\\"\\\\tRequired\\", module)\\n    return result\\nend,\\n```","lua_type":"table","source":{"line":101,"path":"lib/Strapper/init.lua"}},{"name":"silence","desc":"A `StrapperRequireMethod` response that will output nothing.\\n\\n```lua\\nlocal CollectionService = game:GetService(\\"CollectionService\\")\\n\\nlocal Strapper = require(Somewhere.Strapper)\\n\\nlocal strapper = Strapper.new {\\n    defaultLoadParams = {\\n        require = function(moduleScript)\\n            if CollectionService:HasTag(moduleScript, \\"Disabled\\") then\\n                return Strapper.silence\\n            end\\n            return require(moduleScript)\\n        end\\n    }\\n}\\n```\\n\\n:::caution\\nIf a `StrapperRequireMethod` returns nil, a warning will be printed to the console. Return `Strapper.silence` instead!\\n:::","lua_type":"userdata","source":{"line":148,"path":"lib/Strapper/init.lua"}}],"types":[{"name":"LoadParams","desc":"Parameters that decide how modules should be loaded.","lua_type":"{require: (ModuleScript) -> (any)?, moduleReturnType: typeof(newproxy(true))}","source":{"line":72,"path":"lib/Strapper/init.lua"}},{"name":"StrapperConfig","desc":"Parameters that decide how modules should be loaded.","lua_type":"{defaultLoadParams: LoadParams?}","source":{"line":76,"path":"lib/Strapper/init.lua"}}],"name":"Strapper","desc":"A powerful module that assists with requiring other modules.\\n\\n```lua\\n-- A complex implementation can look like this!\\n\\nlocal Strapper = require(Somewhere.Strapper)\\n\\nlocal strapper = Strapper.new {\\n    require = function(moduleScript)\\n        if CollectionService:HasTag(moduleScript, \\"DontRequire\\") then\\n            return Strapper.silence\\n        end\\n\\n        print(\\"Requiring\\", moduleScript, \\"...\\")\\n        local module = require(moduleScript)\\n        print(\\"\\\\tRequired\\", moduleScript)\\n        if module.OnInit then\\n            print(\\"Initalizing\\", moduleScript, \\"...\\")\\n            module:OnInit()\\n            print(\\"\\\\tInitalized\\", moduleScript)\\n        end\\n        return module\\n    end)\\n\\n    andThen = function(moduleScript, module)\\n        if module.OnStart then\\n            print(\\"Starting\\", moduleScript)\\n            module:OnStart()\\n            print(\\"\\\\tStarted\\", moduleScript)\\n        end\\n    end\\n}\\n\\nlocal modules = strapper:LoadModules({\\n    Somewhere.Modules:GetChildren(),\\n    Somewhere.MoreModules:GetChildren()\\n})\\n\\nprint(\\"Loaded modules!\\", modules)\\n```\\n\\n```lua\\n-- Or a more simple implementation...\\n\\nlocal Strapper = require(Somewhere.Strapper)\\n\\nlocal strapper = Strapper.new()\\n\\nlocal modules = strapper:LoadModules({\\n    Somewhere.Modules:GetChildren(),\\n    Somewhere.MoreModules:GetChildren()\\n})\\n\\nprint(\\"Loaded modules!\\", modules)\\n```","source":{"line":66,"path":"lib/Strapper/init.lua"}}')}}]);