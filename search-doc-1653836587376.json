[{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Wally Configuration​","type":1,"pageTitle":"Getting Started","url":"docs/intro#wally-configuration","content":"Once Wally is installed, run wally init on your project directory. This will create a brand new wally.toml file. You can then add any utilities you would like to your project as dependancies. For example: [package] name = &quot;your_name/your_project&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] UIComponent = &quot;virshal/uicomponent@0.1.3&quot; Copy To install or update these dependancies, run wally install within your project's terminal. Wally will then create a folder called 'Packages' with all of your installed dependancies! "},{"title":"Rojo Configuration​","type":1,"pageTitle":"Getting Started","url":"docs/intro#rojo-configuration","content":"I would suggest checking out this guide by Sleitnick for his RbxUtil modules, which inspired this guide! "},{"title":"Usage Example​","type":1,"pageTitle":"Getting Started","url":"docs/intro#usage-example","content":"Information about the respective packages can be found in the API section. Below is an example of a script using installed dependancies: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) -- Reference the packages folder: local Packages = ReplicatedStorage.Packages -- Require package: local UIComponent = require(ReplicatedStorage.Packages.UIComponent) local CreateInstance = UIComponent.CreateInstance -- Use the module: local Button = UIComponent.new() function Button:Build() self.button = CreateInstance &quot;TextButton&quot; { Size = UDim2.new(0, 200, 0, 50), Text = &quot;Click Me!&quot; TextColor3 = self.props.textColor, Parent = self.props.parent } end local gui = CreateInstance(&quot;ScreenGui&quot;, {Parent = LOCAL_PLAYER.PlayerGui}) local newButton = Button{textColor = Color3.new(1, 0.5, 0.5), parent = gui} Copy "},{"title":"UIComponent","type":0,"sectionRef":"#","url":"api/UIComponent","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"UIComponent","url":"api/UIComponent#functions","content":" "},{"title":"CreateInstance​","type":1,"pageTitle":"UIComponent","url":"api/UIComponent#CreateInstance","content":"&lt;/&gt; UIComponent.CreateInstance( className: string,-- The class name of the Instance you want to create props: table-- The properties of the instance you want to create ) → Instance -- Returns a new Instance A utility for creating Instances. local parts = {} parts.cube = UIComponent.CreateInstance &quot;BasePart&quot;, { Name = &quot;Cube&quot;, Anchored = true, Size = Vector3.new(4, 4, 4) Parent = workspace } -- ...which is equivalent to: parts.cube = UIComponent.CreateInstance(&quot;BasePart&quot;, { Name = &quot;Cube&quot;, Anchored = true, Size = Vector3.new(4, 4, 4) Parent = workspace }) -- ...which is also equivalent to: parts.cube = Instance.new(&quot;BasePart&quot;) parts.cube.Name = &quot;Cube&quot; parts.cube.Anchored = true parts.cube.Size = Vector3.new(4, 4, 4) parts.cube.Parent = workspace   "},{"title":"new​","type":1,"pageTitle":"UIComponent","url":"api/UIComponent#new","content":"&lt;/&gt; UIComponent.new() → UIComponent Creates a new UIComponent class. local newComponent = UIComponent.new()   "},{"title":"Build​","type":1,"pageTitle":"UIComponent","url":"api/UIComponent#Build","content":"&lt;/&gt; UIComponent:Build() → self,...-- Returns the object and any provided arguments Build is called during the UIComponent's creation. local UIComponent = require(somewhere.UIComponent) local PersistentGui = UIComponent.new() function PersistentGui:Build() self.gui = CreateInstance(&quot;ScreenGui&quot;, { Name = &quot;PersistentGui&quot;, ResetOnSpawn = false, ZIndex = self.props.ZIndex, Parent = LOCAL_PLAYER.PlayerGui }) return tick() end local persistentGui, creationTime = MainGui.new{ ZIndex = 3 } print(&quot;Created GUI at&quot;, creationTime)   "},{"title":"Defer​","type":1,"pageTitle":"UIComponent","url":"api/UIComponent#Defer","content":"&lt;/&gt; UIComponent:Defer() → () Defer is called after Build and will not yield the thread. "}]